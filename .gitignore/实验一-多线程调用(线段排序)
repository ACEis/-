/*
 * vim: filetype=c:fenc=utf-8:ts=4:et:sw=4:sts=4
 */
#include <inttypes.h>
#include <stddef.h>
#include <math.h>
#include <stdio.h>
#include <sys/mman.h>
#include <syscall.h>
#include <netinet/in.h>
#include <stdlib.h>
#include "graphics.h"
#include "time.h"

extern void *tlsf_create_with_pool(void* mem, size_t bytes);
extern void *g_heap;

/**
 * GCC insists on __main
 *    http://gcc.gnu.org/onlinedocs/gccint/Collect2.html
 */
void __main()
{
    size_t heap_size = 32*1024*1024;
    void  *heap_base = mmap(NULL, heap_size, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, -1, 0);
	g_heap = tlsf_create_with_pool(heap_base, heap_size);
}


//睡眠函数
int msleep(const uint32_t msec)
{
	struct timespec ts={0,1000000*msec};
	return nanosleep(&ts, NULL);
}

//交换线段
void swapline(int *arry, int i, int j,int num)
{
	line(342 * num, i, 342*num + *(arry + i), i, RGB(0,0,0));
	line(342 * num, j, 342*num + *(arry + j), j, RGB(0,0,0));
	int temp = *(arry + i);
	*(arry + i) = *(arry + j);
	*(arry + j) = temp;
	line(342 * num, i, 342*num + *(arry + i), i, RGB(255,255,255));
	line(342 * num, j, 342*num + *(arry + j), j, RGB(255,255,255));
}

/*
排序
*/
//冒泡排序
void bubsort(int *arry, int n, int l)
{
	int i, j;
	for(i = 0; i < n - 1; i++)

		for (j = n - 1; j > i; j--)
		{
			if(*(arry + j) < *(arry + j - 1))
				swapline(arry, j, j - 1, 0);
			msleep(5);
		}

}

//选择
void selsort(int *arry, int n, int l)
{
	int i, j, lowindex = 0;
	for (i = 0; i < n - 1; i++)
	{
		lowindex = i;
		for (j = n - 1; j > i; j--)
		{
			if (arry[j] < arry[lowindex])
				lowindex = j;
			msleep(5);
		}
		if(lowindex != i)
			swapline(arry, lowindex, i, 1);
	}
}

//插入排序
void inssort(int *arry, int n, int l)
{
	int i, j;
	for (i = 1; i < n; i++)
	{
		for(j = i; j > 0; j--)
		{
			if(*(arry + j) < *(arry + j - 1))
				swapline(arry, j, j - 1, 2);
			msleep(5);
		}
	}
}

/*
线程定义
*/
void tsk_foo_line1(void *pv)
{
	int len;
	int i;
	int arry [750];
	srand(time(NULL));
	for (i = 0; i < 750; i++)
	{
		len = rand() % 300;
		line(0, i, len + 0, i, RGB(255,255,255));
		arry[i] = len;
	}
	bubsort(arry,750,0);
	task_exit(0);
}

void tsk_foo_line2(void* pv)
{
	int len;
	int i;
	int arry[750];
	srand(time(NULL));
	for (i = 0; i< 750; i++)
	{
		len = rand() % 300;
		line(342, i, len + 342, i, RGB(255,255,255));
		arry[i] = len;
	}
	selsort(arry,750,342);
	task_exit(0);
}

void tsk_foo_line3(void* pv)
{
	int len;
	int i;
	int arry[750];
	srand(time(NULL));
	for(i = 0; i < 750; i++)
	{
		len = rand() % 300;
		line(684, i, len + 684, i, RGB(255,255,255));
		arry[i] = len;
	}
	inssort(arry,750,684);
	task_exit(0);
}





/**
 * 第一个运行在用户模式的线程所执行的函数
 */
void main(void *pv)
{
    int mode = 0x0118;
	init_graphic(mode);
	int exit_graphic();

	//申请线程栈   
	unsigned char *stack_foo1 = (unsigned char*)malloc(1024*1024);  
	unsigned char *stack_foo2 = (unsigned char*)malloc(1024*1024);  
	unsigned char *stack_foo3 = (unsigned char*)malloc(1024*1024); 

	//创建线程
	int tid_foo1,tid_foo2,tid_foo3;   
	tid_foo1=task_create(stack_foo1+1024*1024, tsk_foo_line1,(void*)0);    
	tid_foo2=task_create(stack_foo2+1024*1024, tsk_foo_line2,(void*)0);   
	tid_foo3=task_create(stack_foo3+1024*1024, tsk_foo_line3,(void*)0); 

	//线程栈释放   
	task_wait(tid_foo1,NULL);  
	free(stack_foo1);   
	task_wait(tid_foo2,NULL);   
	free(stack_foo2);   
	task_wait(tid_foo3,NULL);    
	free(stack_foo3);
}



